#summary Documentation intro
#labels Featured

= Introduction =

Tweener is a class for Actionscript 2 and 3, meaning itâ€™s a piece of code you can call and reuse on your own movies.

For a quick explanation on how to install Tweener, see [Installation] first.

If you are used to Actioncript 1, prototypes, or #includes, and don't know how to use a real class yet, please read the [HowToUseAClass How to use a class] page for a brief introduction on the issue.

If you are used to [http://hosted.zeh.com.br/mctween MC Tween] and want to know the differences on the syntax between MC Tween and Tweener, also check [DifferencesBetweenMCTweenAndTweener Differences between MC Tween and Tweener].


== Brief explanation ==

Tweener is a static class - that is, a class that allows you to run methods on it, or call its properties, but that never lets you create instances from it. This means that, with Tweener, you never create a new object - you simply tells Tweener to do something for you.

Tweener works on the idea that, instead of setting the value of a given property of a given object directly, as in `myMC._x = 10`, you can tell that property to create a transition to that value - by doing this transition or tweening, you can control your numeric data in a more fluid way. Doing slides, fades, and all kinds of animation is the result of this kind of manipulation: by making a property or variable go to one value or the other fluidly, not immediately.

With Tweener, you write your code by adding new tweenings or transitions to the movie, using the method `addTween`. Like this (AS2 version):

{{{
Tweener.addTween(myMovie, {_x:10, _y:10, time:1, transition:"linear"});
}}}

Or this (AS3 version):

{{{
Tweener.addTween(myMovie, {x:10, y:10, time:1, transition:"linear"});
}}}

This will move the object `myMovie` on screen, going to the position 10,10, in 1 second, using a `linear` animation (other [Transitions transition types] are available).

The final value is an absolute value, not a relative one. This means that, if you want to, say, move `myMovie` 10 pixels to the right (instead of sliding it to column 10), you would do this (in AS2):

{{{
Tweener.addTween(myMovie, {_x:myMovie._x+10, time:1, transition:"linear"});
}}}

Also notice you can chain tweenings sequentially, and thus creating complex animations, by using delays. For example, to move `myMovie` to column 10, then to column -10, you would do (in AS2):

{{{
Tweener.addTween(myMovie, {_x:10, time:1, transition:"linear"});
Tweener.addTween(myMovie, {_x:-10, time:1, delay:1, transition:"linear"});
}}}

Notice the use of the `delay` property.

The cool thing with Tweener is that this `addTween` method allows you to use a plethora of different [TweeningParameters tweening parameters], giving you control to a lot of different transition properties.

The important thing to notice is that Tweener isn't just a class used to create just animations. It's, instead, a class used to create transitions - doing tweenings *on any numeric property of any object* - which can be used for many purposes, including visual animation. It's not restricted to the normal Actionscript classes like !MovieClip or !TextField either; you can use it to tween properties of your own classes and objects, like moving the `cameraX` and `cameraY` properties of your game rendering engine, the `currentTemperature` of your Thermometer object, the `travelPosition` of your Train simulation movie, the `currentStrength` of each of your spectrum analyzer graph bars, and so on and so forth.

See the list below for a better explanation of all the available methods. Don't forget to also check the [http://tweener.googlecode.com/svn/trunk/examples/ examples] list for a bunch of practical uses of Tweener, including their source files.

== Public methods ==

  * [addCaller]
  * [addTween]
  * [debug_getList]
  * [getTweenCount]
  * [getTweens]
  * [getVersion]
  * [isTweening]
  * [pauseTweens]
  * [registerSpecialProperty]
  * [registerSpecialPropertySplitter]
  * [registerTransition]
  * [removeTweens]
  * [removeAllTweens]
  * [resumeTweens]
  * [setTimeScale]
  * [updateTime]

== Other important articles on the documentation ==

  * [HowToUseAClass How to use a class]: introductory explanation on the use of classes
  * [DifferencesBetweenMCTweenAndTweener Differences between MC Tween and Tweener]: a comparison between the two extensions, showing how to adapt the knowledge from MC Tween to Tweener
  * [TweeningParameters Tweening parameters]: all parameters accepted when creating a new tween
  * [SpecialProperties Special properties]: all custom-made properties that can be used on Tweener, acting as fake variables
  * [Transitions Transitions]: list of all available transitions (or easing equations)
  * [UsingCustomTransitions Using custom transitions]: how to create your own transition equations and use them seamlessly with Tweener
