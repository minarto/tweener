#summary List of special properties that can be used for tweening
#labels Temp

= Special Properties =

When creating new tweenings, Tweener lets you use certain special properties to create transitions on values that are numeric, but not directly available as a property. This usually includes Sound volume or panning, movieclip frames, color properties, and so on.

To create new regular tweenings, one would make use of the [addTween] method, like so:

{{{
import caurina.transitions.Tweener;
Tweener.addTween(myMC, {_x:10, time:1, transition:"linear"});
}}}

The special tweenings work in the same way. For example, to create a playback tweening - one that moves a `MovieClip`'s timeline based on the tweening position - a developer would simply write this:

{{{
import caurina.transitions.Tweener;
Tweener.addTween(myMC, {_frame:100, time:1, transition:"linear"});
}}}

So `_frame`, in this context, is the name of the special property being tweened. When it is applied, it actually works by reading the current `MovieClip` frame - by way of `_currentframe` - or applying a new one, by way of `gotoAndStop()`. The same can be said about all other special tweening properties, as they work by setting values with methods, or reading them with functions.

Tweener has a list of default special properties that are automatically created when using Tweener. However, any developer can add new special properties on their own movies for specific tasks. See the [registerSpecialProperty] and [registerSpecialPropertySplitter] methods for more information.

Below is the list of default special properties that can be used on Tweener out-of-the-box. Be aware that they have the same name for both AS2 and AS3 versions - the idea is that the underline before the property name will identify the special properties - but their desired values may vary as the properties they refer to may have changed; Tweener follows the conventions of the current version language, event if the special properties themselves are customized pieces of code.


== Special properties for all objects ==

=== _bezier ===

An object (or array of objects) containing points that define a quadratic bezier curve that modifies the values a certain transition must take. In practice, what this parameter does is that it tweaks the transition values in a way that it looks like the value updates are going through a curve instead of a line.

The parameter object must contain a number of properties that use the same name of the properties that need to go through the bezier-defined path. With this flexible approach, any number of properties of any property of any object can be changed by the bezier property, so the `_bezier` property is not tied to hardcoded x/y tweenings in any way.

*Examples (AS2)*

{{{
// Make a regular movieclip slide to a certain position, but with a bezier-defined curve path
Tweener.addTween(myMC, {_x:200, _y:100, _bezier:{_x:200, _y:0}, time:1, transition:"easeoutquad"});

// Uses an array for a more complex path, defined several different points
Tweener.addTween(myMC, {_x:200, _y:100, _bezier:[{_x:200, _y:0}, {_x:0, _y:200}], time:1, transition:"easeoutquad"});

// Same as above, but split in several different lines and objects 
var myPath:Array = new Array();
myPath.push({_x:200, _y:0});
myPath.push({_x:0, _y:200});
Tweener.addTween(myMC, {_x:200, _y:100, _bezier:myPath, time:1, transition:"easeoutquad"});
}}}

*Examples (AS3)*

{{{
// Tweens a camera along a bezier path using an instance of a Camera class from Papervision3D
Tweener.addTween(myCamera, {x:0, y:0, z:100, _bezier:{x:300, y:200, z:800}, time:1, transition:"linear"});
}}}

See [http://labs.zeh.com.br/blog/?p=104 this page] for more information.


== Special properties for MovieClip objects ==

=== _color ===

...

=== _colorTransform ===

...

=== _color_ra ===

...

=== _color_rb ===

...

=== _color_ga ===

...

=== _color_gb ===

...

=== _color_ba ===

...

=== _color_bb ===

...

=== _color_aa ===

...

=== _color_ab ===

...

=== _autoAlpha ===

A regular `_alpha`/`alpha` transition, but one that automatically hides the object (via `_visible`) if the new value is 0.

*Example (AS2)*

{{{
// Fades a movieclip out then automatically sets its _visible property to false
Tweener.addTween(myMC, {_autoAlpha:0, time:1, transition:"linear"});
}}}

*Example (AS3)*

{{{
// Fades a movieclip in to 100% opacity, automatically setting its visible property to true
Tweener.addTween(myMC, {_autoAlpha:1, time:1, transition:"linear"});
}}}

=== _frame ===

Frame number you want a movieclip to navigate to. A kind of controlled playback. This is specially interesting when you want a movieclip animation to execute on a very specific ammount of time, or with a different transition, as simply issuing `gotoAndPlay()` doesn't allow you much control over time. This is not meant as an automatic playback/rewind/fastforward engine though, as it's only good for seeking with specific times and transitions.

Under both AS2 and AS3, allowed values range from 1 to the last movieclip frame.

*Example (AS2 and AS3)*

{{{
Tweener.addTween(myMC, {_frame:10, time:1, transition:"linear"});
}}}

=== _scale ===

The scale value to tween to. `_scale` will tween both dimensions (x and y) independently.

In AS3 `_scale` can be applied to any DisplayObject and is AS2 can be applied to MovieClip and TextField instances.

Keep in mind that in AS3 scale is 1 based (1= 100%) while in AS2 scale is 100 based (100 = 100%). 

*Example (AS2)*

{{{
// Resizes  a movieclip to 2 x it's original size
Tweener.addTween(myMC, {_scale:200, time:1, transition:"linear"});
}}}

*Example (AS3)*

{{{
// Resizes  a movieclip to 2 x it's original size
Tweener.addTween(myMC, {_scale:2, time:1, transition:"linear"});
}}}

== Special properties for Sound objects ==

=== _sound_volume ==

Sets the sound volume of a `Sound` object (AS2) or a `SoundChannel` object (AS3).

Under AS2, allowed values range from 0 (silent) to 100 (full volume).

Under AS3, allowed values range from 0 (silent) to 1 (full volume).

*Example (AS2)*

{{{
import caurina.transitions.Tweener;

// Create a new Sound object
this.loopSound = new Sound(this);

// Attach a sound asset from the library to it
this.loopSound.attachSound("mySoundFromTheLibrary");

// Initially, reset the sound
this.loopSound.setVolume(0);

// Now play...
this.loopSound.start(0, 1000);

// ... and fade it in
Tweener.addTween(this.loopSound, {_sound_volume:100, time:1, transition:"linear"});
}}}

*Example (AS3)*

{{{
import caurina.transitions.Tweener;
import flash.media.Sound;
import flash.media.SoundTransform;

Tweener.init(stage);

// Create a new Sound object from the library
this.loopSound = new MySoundFromTheLibrary();

// Plays it with a SoundTransform instance for mute volume
var sndTransform:SoundTransform = new SoundTransform();
sndTransform.volume = 0;
this.loopChannel = this.loopSound.play(0, 1000, sndTransform);

// And fade it in
Tweener.addTween(this.loopChannel, {_sound_volume:1, time:1, transition:"linear"});
}}}


=== _sound_pan ==

Sets the sound panning - the balance of sound volume between the left and right speaker - of a `Sound` object (AS2) or a `SoundChannel` object (AS3).

Under AS2, allowed values range from -100 (left speaker only) to 0 (both speakers) to 100 (right speaker only).

Under AS3, allowed values range from -1 (left speaker only) to 0 (both speakers) to 1 (right speaker only).


== Special properties for Filter tweening ==

Certain Actionscript objects (like TextFields and MovieClips) can have _filters_ applied to them. These filters allow certain special transformations to take place on the object prior to rendering. Tweener lets you tween the filter properties by adding special tweenings to the objects themselves.

When creating a filter tweening, the developer has to keep in mind the way special filters properties work.

First, if you're creating a new filter tween or tweening the value of properties of a filter that's not yet applied to an object, Tweener first adds a *default* filter to that object, so its properties can be tweened. Sometimes the appearance of this default, initial filter is not the desired one; in that case, a new filter should be added first to the object, to ensure the transition will occur in the way that's expected. Check the default values of such filters below.

Second, if you're creating a filter tween or tweening the value of properties of a filter that is already added to the object, Tweener simply tweens the filter's property values to the new values. If the object already has two different filters of that same filter type (say, two !BlurFilter filters added) Tweener acts on the first one found.

=== _filter ===

A filter (of any type) that you want to add to the object. Tweener automatically figures the filter type used and create a new filter tweening from default values if the filter type is not yet featured on the object, or tweens the value of an existing filter's properties.

_Please notice: this feature is still under development, so the only filter which is properly supported is the blur filter._

*Example (AS2)*

{{{
// Adding a new filter: creates a BlurFilter on the object
import flash.filters.BlurFilter;
var myBlur:BlurFilter = new BlurFilter(10, 10, 2);
Tweener.addTween(myMC, {_filter:myBlur, time:1, transition:"linear"});

// Tweening an existing filter: changes the BlurFilter already used
import flash.filters.BlurFilter;
var myBlur:BlurFilter = new BlurFilter(10, 10, 2);
myMC.filters = [myBlur];
var myBlurNone:BlurFilter = new BlurFilter(0, 0, 2);
Tweener.addTween(myMC, {_filter:myBlurNone, time:1, transition:"linear"});
}}}


=== _blur_blurX ===

Horizontal radius of the blur to be applied to an object, in pixels. The default value for new filters (used when not explicitly available) is 0.

This is the equivalent of [http://livedocs.adobe.com/flex/2/langref/flash/filters/BlurFilter.html BlurFilter]'s property `blurX`.

*Example (AS2)*

{{{
Tweener.addTween(myMC, {_blur_blurX:10, time:1});
}}}


=== _blur_blurY ===

Vertical radius of the blur to be applied to an object, in pixels. The default value for new filters (used when not explicitly available) is 0.

This is the equivalent of [http://livedocs.adobe.com/flex/2/langref/flash/filters/BlurFilter.html BlurFilter]'s property `blurY`.

*Example (AS2)*

{{{
Tweener.addTween(myMC, {_blur_blurY:10, time:1});
}}}


=== _blur_quality ===

Quality of the blur to be applied to an object. It should be used when there's the need to specify the quality of new blur filters. The default value for new filters (used when not explicitily available) is 1.

This is the equivalent of [http://livedocs.adobe.com/flex/2/langref/flash/filters/BlurFilter.html BlurFilter]'s property `quality`.

*Example (AS2)*

{{{
Tweener.addTween(myMC, {_blur_blurX:10, _blur_quality:2, time:1});
}}}


== See also ==

[registerSpecialProperty], [registerSpecialPropertyModifier], [registerSpecialPropertySplitter]



